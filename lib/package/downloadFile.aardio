//package.downloadFile tar 文件下载
//TODO 不要重复下载
//包存诸路径加上版本号
import fsys;
import inet.http;
import sevenZip.lzma;
import fsys.untar;
import inet.downBox;
namespace package.downloadFile
import win
var findLibFullPath = function(extraDir){
	 var fileRootDir=extraDir;
	 if(!..io.exist(extraDir)){
	 	return ; 
	 }

 	
 	var setupFile = ..fsys.joinpath(fileRootDir,"setup.dl.aardio")
	if( ..io.exist(setupFile) ){
		..fsys.delete(setupFile)	
	}
	
	var libFullPath;
	..fsys.enum( fileRootDir, "*.*",
		function(dir,filename,fullpath,findData){ 
			libFullPath=fullpath
			return false; 
		}
	,false);

	return libFullPath; 
}

var tar = function(filePath,downBox,isUtf8){
	var err 
	var tarFile = ..fsys.untar(filePath);
	if(!tarFile) return "文件路径不正确：" + filePath; 
	tarFile.utf8 = isUtf8
	tarFile.onProgressFile = function(path){
		downBox.labInfo.text = path;
	};
	for(fileName,writeSize,remainSize,pos in tarFile.eachBlock(1000) ){ 
		if( (peekMsg()!==null) && downBox.continueModal ){
			downBox.progress.progressPos = pos
			downBox.labInfo.text = fileName;
		}
	}
	tarFile.close()
	if(tarFile.complete){
		return err; 
	}else{
		return tarFile.lastError; 
	} 
}

download = function(url,title="下载",saveDir,extraDir,saveName,parentForm){
	var tUrl = ..inet.url.split(url);
	if(!tUrl){
		error("错误的URL参数",2)
	}
	var tPath = ..io.splitpath(tUrl.path)
	
	saveDir = ..io.fullpath(saveDir : "~\download\" )
	..fsys.createDir(saveDir);
	
	if(!saveName){
		saveName = tPath.file;
	}
	if(!extraDir){
		extraDir = ..string.match(saveName,"(.+)\.[^\.]+$"  );
		if(!extraDir) extraDir = saveName + ".uncompress";
		extraDir = ..fsys.joinpath(saveDir,extraDir)
	}
	else {
		extraDir = ..io.fullpath(extraDir);
	} 
	var downloadFilePath = ..fsys.joinpath(saveDir,saveName)
	//判断目录是否存在
	//TODO 换成判断下载文件的hash是否和远程的一样
	var  libFullPath;
	libFullPath = findLibFullPath(extraDir)

	if(libFullPath){
		return  true,libFullPath; 
	}

	
	var pathCabinet = ..fsys.joinpath(saveDir,saveName)
	var tarTempName = pathCabinet + ".tar";
	var downBox = ..inet.downBox(parentForm,title,false) 
	downBox.headers = self.headers;
	downBox.referer = self.referer;
	downBox.userAgent = self.userAgent;
	downBox.preget = self.preget;
	
	downBox.endProc = function(){
		downBox.text = "正在解压缩:" + saveName; 
		..win.peekPumpInputMessage();
		
   
		downBox.progress.hide = false;
		 
		var processed = 0;
		var step = downBox.contentLength / 1000;
		downBox.progress.setProgressRange(1,1000);  
		var peekMsg = ..win.peekPumpMessage;
		if(..string.match(saveName,"<.lzma>$")){
			var ret = ..sevenZip.lzma.decodeFile(pathCabinet,tarTempName,function(inProcessed,outProcessed){ 
				if( (peekMsg()!==null) && downBox.continueModal ){
			 		processed = processed + inProcessed; 
			 		downBox.progress.progressPos = processed / step;
				}
				else {
					return true;
				}
				
			} ); 
			
			if(!ret){
				owner.complete = false;
				owner.endModal(); 
				return;
			}
		}else{
			tarTempName = downloadFilePath
		}		
		downBox.onClose = function(){ 
			return false;
		}
		downBox.text = "正在展开:" + saveName; 
		var err = tar(tarTempName,downBox)
		if(!err){
			owner.endModal(); 
		}else{
			downBox.text = "展开出错"+err+"正在重试" + saveName; 
			err = tar(tarTempName,downBox,true) //以 utf8 模式重试一次
		}
		..io.remove( tarTempName );
	}
	
	downBox.download(url,pathCabinet,null,null,"" ) 


	
	if(!downBox.complete){ 
		return;
	} 
	
	if( ! ..io.exist(pathCabinet,4) ){  
		return false; 
	} 

	libFullPath = findLibFullPath(extraDir)
	if(!libFullPath) return ; 
	return true,libFullPath; 		
}